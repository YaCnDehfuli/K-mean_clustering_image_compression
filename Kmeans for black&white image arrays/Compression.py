# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PAKaxtdxOY3bLeoJG623zp_VcaX63uez
"""

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
class Kmean:
  def __init__(self,input,k):
    self.input=input
    self.k=k
    self.centers=np.random.uniform(low=0,high=255,size=(self.k,))       #generating initial centers randomly
    self.labels=np.ones(self.input.shape[0],dtype=np.int8)
    self.newlabels=np.zeros(self.input.shape[0],dtype=np.int8)
  def fit(self):      
      member=np.zeros(self.k)
      sum=np.zeros(self.k)     
      flag = False
      while(self.labels.tolist() != self.newlabels.tolist()) or (flag):
        cluster = 0
        flag = False
        self.labels=self.newlabels         
        for j in range (self.input.shape[0]):                        #picking an input sample
          min = float("inf")                                          
                   
          for i in range(self.k):                                    
            if (np.abs(self.input[j] - self.centers[i]) < min):      #comparing the sample with all the cluster centers
              min = np.abs(self.input[j] - self.centers[i]) 
              cluster = i       
        
          member[cluster] += 1                                              #number of the cluster members
          sum[cluster] += (self.input[j])
          if(member[cluster] != 0):
            self.centers[cluster] = sum[cluster] / member[cluster] 
            self.newlabels[j]=cluster                                    #summation of the cluster members
          else:
            for p in range(self.k):
              self.centers[p]=np.random.choice(self.input)
              flag = True
    

img = (Image.open('Ronn.jpg')).convert('L')                          
img_arr=np.array(img)                                                #converting image to array
plt.figure()
plt.imshow(img_arr,cmap='gray')
plt.show()
one_dim=np.reshape(img_arr,(168*300,))                               #turn two-dimentional input into one
x=one_dim                                                            
m=Kmean(x,20)
m.fit()
print(m.centers) 
print(m.labels)
plt.figure()
plt.imshow(m.centers[m.labels].reshape(168,300),cmap='gray')       #turning to the initial dimention for plotting  
plt.show()