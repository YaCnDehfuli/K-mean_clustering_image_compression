# -*- coding: utf-8 -*-
"""K-Mean Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19l8Bf4FhvFoHodvpJ6aGegadFRLHk8qM
"""

import numpy as np
import matplotlib.pyplot as plt
class Kmean:
  def __init__(self,input,k):
    self.input=input
    self.k=k
    self.centers=np.zeros(self.k)
    for p in range(self.k):
      self.centers[p]=np.random.choice(self.input)                       #generating initial centers randomly from inputs
    self.newcenters = np.zeros(self.k)          
    self.labels= np.ones(self.input.shape[0])
    self.newlabels=np.zeros(self.input.shape[0])
    self.wrongs=np.zeros(self.k)      
  def fit(self):      
      member=np.zeros(self.k)
      sum=np.zeros(self.k)     
      flag = False
      while(self.labels.tolist() != self.newlabels.tolist()) or (flag):
        cluster = 0                                
        flag = False
        self.labels=self.newlabels         
        for j in range (self.input.shape[0]):                            #picking an input sample
          min = float("inf")                                          
                   
          for i in range(self.k):                                    
            if (np.abs(self.input[j] - self.centers[i]) < min):          #comparing the sample with all the cluster centers
              min = np.abs(self.input[j] - self.centers[i]) 
              cluster = i       
        
          member[cluster] += 1                                           #number of the cluster members
          sum[cluster] += (self.input[j])
          if(member[cluster] != 0):
            self.centers[cluster] = sum[cluster] / member[cluster] 
            self.newlabels[j]=cluster                                    #summation of the cluster members
          else:
            for p in range(self.k):
              self.centers[p]=np.random.choice(self.input)                                 
              flag = True 

x=np.array([2,3,4,10,11])
m=Kmean(x,2)
m.fit()
print('The cluster centers are : ' + str(m.centers) +'\n') 
print('the label of inputs are : ' + str(m.labels) + '\n')